AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cribl LogStream Free Deployment x86_64 (qs-1skh1tk65)
Parameters:
  vpcId:
    Description: 'REQUIRED: ID of your existing VPC.'
    Type: AWS::EC2::VPC::Id
  subnetIds:
    Description: 'REQUIRED: ID of one of your existing Subnet IDs. This subnet must be in the same VPC as VPC ID above.'
    Type: List<AWS::EC2::Subnet::Id>
  webAccessCidr:
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: 'REQUIRED: The CIDR IP range permitted to access the LogStream web console. We recommend you set this value to a trusted IP range.'
  SQS:
    Description: Name of the SQS for VPCFlow Logs.
    Type: String
    Default: cribl-vpc-sqs
  instanceType:
    Description: EC2 instance type to provision the LogStream instance. If none specified, c5.2xlarge will be used.
    Type: String
    Default: c5.xlarge
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - m5ad.large
      - m5ad.xlarge
      - m5ad.2xlarge
      - m5ad.4xlarge
      - m5ad.8xlarge
      - c5a.large
      - c5a.xlarge
      - c5a.2xlarge
      - c5a.4xlarge
      - c5a.8xlarge
      - c5ad.large
      - c5ad.xlarge
      - c5ad.2xlarge
      - c5ad.4xlarge
      - c5ad.8xlarge
      - m6a.large
      - m6a.xlarge
      - m6a.2xlarge
      - m6a.4xlarge
      - m6a.8xlarge
      - m6a.12xlarge
      - c7a.medium
      - c7a.large
      - c7a.xlarge
      - c7a.2xlarge
      - c7a.4xlarge
      - c7a.8xlarge
      - m7a.medium
      - m7a.large
      - m7a.xlarge
      - m7a.2xlarge
      - m7a.4xlarge
      - m7a.8xlarge
    ConstraintDescription: Must contain valid instance type
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - E9007
      ignore_reasons:
        - A combination of Serverless Transform and metadata not being passed through (yet) means that we need to globally exclude E9007 until an upstream workaround is available.
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Instance Configuration
        Parameters:
          - instanceType
          - SQS
      - Label:
          default: Network Configuration
        Parameters:
          - vpcId
          - subnetIds
          - webAccessCidr
    ParameterLabels:
      instanceType:
        default: EC2 Instance Type
      SQS:
        default: SQS For VPC Flow
      vpcId:
        default: VPC ID
      subnetIds:
        default: Subnet ID
      webAccessCidr:
        default: Web Access CIDR
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert:
          Fn::EachMemberIn:
            - Fn::ValueOfAll:
                - AWS::EC2::Subnet::Id
                - VpcId
            - Fn::RefAll: AWS::EC2::VPC::Id
        AssertDescription: All subnets must in the VPC
Mappings:
  RegionMap:
    us-east-1:
      ami: ami-089f1e98a449b236d
    eu-west-1:
      ami: ami-06a145c33d66f8a40
    us-west-1:
      ami: ami-0bb0e401a067d7110
    ap-southeast-1:
      ami: ami-002c3d42a54172a85
    ap-northeast-1:
      ami: ami-08ae99d3b04558990
    us-west-2:
      ami: ami-02ade7842a5b94480
    sa-east-1:
      ami: ami-0f2a721b4f9c84551
    ap-southeast-2:
      ami: ami-0e9d37d7586544e45
    eu-central-1:
      ami: ami-08dd474fbd34ec7f6
    ap-northeast-2:
      ami: ami-0c4625a69636a9735
    us-east-2:
      ami: ami-082756c2b47828165
    ca-central-1:
      ami: ami-045ff3c69c225b310
    eu-west-2:
      ami: ami-04c7f541af067d04a
    eu-west-3:
      ami: ami-044192b97790f378e
    ap-northeast-3:
      ami: ami-065bfac8beda503f2
    eu-north-1:
      ami: ami-0127b1503311ef4b4
    eu-south-1:
      ami: ami-04661aa6dc22db5c9
    eu-central-2:
      ami: ami-09bb54c7169b2dcc5
    eu-south-2:
      ami: ami-07f13a3de9c47883a
    ap-southeast-4:
      ami: ami-058e57f7679e1bbaa
Resources:
  ec2SingleSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cribl LogStream Access
      VpcId:
        Ref: vpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp:
            Ref: webAccessCidr
          Description: UI access to the LogStream instance
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
          Description: Egress access
  LoadBalancerExternal:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups:
        - Ref: ec2SingleSecurityGroup
      Subnets:
        - Fn::Select:
            - 0
            - Ref: subnetIds
        - Fn::Select:
            - 1
            - Ref: subnetIds
  CriblTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancerExternal
    Properties:
      HealthCheckPort: '9000'
      HealthCheckProtocol: HTTP
      Port: 9000
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Ref: vpcId
  CriblWebListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: CriblTargetGroup
      LoadBalancerArn:
        Ref: LoadBalancerExternal
      Port: 9000
      Protocol: HTTP
  CriblWebListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: CriblTargetGroup
      Conditions:
        - Field: http-request-method
          HttpRequestMethodConfig:
            Values:
              - GET_OR_HEAD
      ListenerArn:
        Ref: CriblWebListener
      Priority: 1
  s3DefaultDestinationBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: Cribl LogStream default destination bucket
  LogstreamRole:
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /logstream/${AWS::StackName}/
      Description: Cribl LogStream default IAM role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: S3Destinations
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - Fn::Sub: ${s3DefaultDestinationBucket.Arn}
                  - Fn::Sub: ${s3DefaultDestinationBucket.Arn}/*
        - PolicyName: S3Sources
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetBucketLocation
                Resource:
                  - Fn::Sub: ${s3DefaultDestinationBucket.Arn}
                  - Fn::Sub: ${s3DefaultDestinationBucket.Arn}/*
        - PolicyName: SQSSources
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:sqs:${AWS::Region}::${AWS::AccountId}::${SQS}
      Tags:
        - Key: Name
          Value: Cribl LogStream IAM role
  iamDefaultInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path:
        Fn::Sub: /logstream/${AWS::StackName}/
      Roles:
        - Ref: LogstreamRole
  ec2WorkersAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::Select:
            - 0
            - Ref: subnetIds
        - Fn::Select:
            - 1
            - Ref: subnetIds
      TargetGroupARNs:
        - Ref: CriblTargetGroup
      DesiredCapacity: '1'
      MaxSize: '1'
      MinSize: '0'
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId:
          Ref: ec2WorkerslaunchTemplate
        Version:
          Fn::GetAtt:
            - ec2WorkerslaunchTemplate
            - LatestVersionNumber
      Tags:
        - Key: Name
          Value: Cribl LogStream Worker Nodes ASG
          PropagateAtLaunch: false
  ec2WorkersAutoScalingGroupLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: ec2WorkersAutoScalingGroup
      DefaultResult: ABANDON
      HeartbeatTimeout: 3600
      LifecycleHookName: cribl-logstream-worker-shutdown
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
  ec2WorkerslaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceInitiatedShutdownBehavior: terminate
        ImageId:
          Fn::FindInMap:
            - RegionMap
            - Ref: AWS::Region
            - ami
        InstanceType:
          Ref: instanceType
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
              - iamDefaultInstanceProfile
              - Arn
        SecurityGroupIds:
          - Ref: ec2SingleSecurityGroup
        UserData:
          Fn::Base64:
            Fn::Sub:
              - "#cloud-config\nruncmd:\n  - /usr/local/bin/configure_logstream.sh -m single -b ${s3DefaultDestinationBucket}\n  - sleep 10\n  - cloud-init query -f \"$(cat /opt/cribl_build/users.json.j2)\"\
                \ > /opt/cribl/local/cribl/auth/users.json\n  - chown -R cribl:cribl /opt/cribl\n"
              - s3DefaultDestinationBucket:
                  Ref: s3DefaultDestinationBucket
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: Cribl LogStream Worker Instance
              - Key: Purpose
                Value: Machine data analysis
  workerShutdownEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Cribl LogStream Worker Shutdown Event
      EventPattern:
        source:
          - aws.autoscaling
        detail-type:
          - EC2 Instance-terminate Lifecycle Action
        detail:
          AutoScalingGroupName:
            - Ref: ec2WorkersAutoScalingGroup
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - functionWorkerShutdown
              - Arn
          Id: WorkerShutdownFunction
  lamdbaPermissionWorkerShutdownEventRule:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: functionWorkerShutdown
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - workerShutdownEventRule
          - Arn
  functionWorkerShutdown:
    Type: AWS::Serverless::Function
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - E3030
    Properties:
      Description: Cribl LogStream Worker Shutdown
      InlineCode: "import boto3\nimport logging\nimport json\nimport time\nimport os\n\nssm = boto3.client('ssm')\nautoscaling = boto3.client('autoscaling')\n \n# Logging\nlog = logging.getLogger()\nlog.setLevel(logging.DEBUG)\n\
        \ndef handler(event, context):\n  log.debug(\"Received event {}\".format(json.dumps(event)))\n\n  command = ssm.send_command(\n    InstanceIds=[event['detail']['EC2InstanceId'],],\n    DocumentName='AWS-RunShellScript',\n\
        \    Comment='Gracefully terminate Cribl LogStream worker node',\n    Parameters={\"commands\":[\"systemctl disable cribl\",\"systemctl daemon-reload\",\"systemctl stop cribl\"],\"workingDirectory\"\
        :[\"\"],\"executionTimeout\":[\"3600\"]},\n    CloudWatchOutputConfig={\n        'CloudWatchOutputEnabled': True\n    }\n  )\n\n  command_id = command['Command']['CommandId']\n\n  for x in range(0,59):\n\
        \    time.sleep(10)\n    response = ssm.get_command_invocation(\n        CommandId=command_id,\n        InstanceId=event['detail']['EC2InstanceId'],\n    )\n    if response.get('Status') == 'Success':\n\
        \      break\n    else:\n      continue\n\n  autoscaling.complete_lifecycle_action(\n    LifecycleHookName=event['detail']['LifecycleHookName'],\n    AutoScalingGroupName=event['detail']['AutoScalingGroupName'],\n\
        \    LifecycleActionToken=event['detail']['LifecycleActionToken'],\n    LifecycleActionResult='CONTINUE',\n    InstanceId=event['detail']['EC2InstanceId']\n  )\n"
      Policies:
        - Statement:
            - Action:
                - ssm:SendCommand
              Effect: Allow
              Resource: '*'
              Condition:
                StringEquals:
                  aws:ResourceTag/aws:ec2launchtemplate:id:
                    Ref: ec2WorkerslaunchTemplate
            - Action:
                - ssm:SendCommand
              Effect: Allow
              Resource:
                Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}::document/AWS-RunShellScript
            - Action:
                - autoscaling:CompleteLifecycleAction
              Effect: Allow
              Resource:
                Fn::Sub: arn:${AWS::Partition}:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${ec2WorkersAutoScalingGroup}
            - Action:
                - ssm:GetCommandInvocation
              Effect: Allow
              Resource: '*'
      Runtime: python3.12
      Timeout: 600
      Handler: index.handler
Outputs:
  logstreamWebUrlPublic:
    Value:
      Fn::Sub: http://${LoadBalancerExternal.DNSName}:9000/login
    Description: Cribl LogStream Web URL (PublicIp)
  logstreamWebAccessCreds:
    Value: admin / EC2 Instance ID
    Description: Default Web Access Credentials
